<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dan.example.dan_financial_book.calendar.mapper.CalendarMapper">
    <parameterMap id="findCalendarParam" type="dan.example.dan_financial_book.calendar.dto.CalendarReqDto" />

    <resultMap type="dan.example.dan_financial_book.calendar.dto.CalendarDto" id="findCalendarResult" >
        <result column="date" property="date"/>
        <result column="holi_yn" property="holiYn"/>
        <result column="holi_name" property="holiName"/>
        <result column="expense" property="expense"/>
        <result column="income" property="income"/>
        <result column="transfer" property="transfer"/>
    </resultMap>

    <insert id="insertHolidays" parameterType="java.util.List">
        <foreach collection="list" item="holidayDao" separator=";">
            INSERT INTO t_holiday
                (loc_date, date_name, holi_yn, crt_time, upt_time)
            VALUES
                (#{holidayDao.locDate}, #{holidayDao.dateName}, #{holidayDao.holiYn}, now(), now())
            ON CONFLICT ON CONSTRAINT t_holiday_unique
            DO UPDATE
                  SET date_name = #{holidayDao.dateName},
                      holi_yn = #{holidayDao.holiYn},
                      upt_time = now()
        </foreach>
    </insert>

    <select id="findCalendarByMonth" parameterMap="findCalendarParam" resultMap="findCalendarResult">

        WITH RawData AS (
            SELECT COALESCE(tt.tr_date, to_date(th.loc_date, 'YYYYMMDD')) AS date
                   , COALESCE(tt.tr_type, '') AS type
                   , COALESCE(tt.amount, 0) AS amount
                   , COALESCE(th.holi_yn, FALSE) AS holi_yn
                   , COALESCE(th.date_name, '') AS holi_name
              FROM t_transaction tt
              FULL OUTER JOIN t_holiday th
                ON tt.tr_date = to_date(th.loc_date, 'YYYYMMDD')
             WHERE 1=1
               AND (tt.tr_date BETWEEN to_date(#{stdt},'YYYYMMDD') AND to_date(#{eddt}, 'YYYYMMDD')
                OR th.loc_date BETWEEN #{stdt} AND #{eddt})
        )
        SELECT rd.date
               , bool_or(rd.holi_yn) AS holi_yn
               , MAX(rd.holi_name) AS holi_name
               , COALESCE(max(CASE WHEN rd.type='0' THEN amount END), 0) AS expense
               , COALESCE(max(CASE WHEN rd.type='1' THEN amount END), 0) AS income
               , COALESCE(max(CASE WHEN rd.type='2' THEN amount END), 0) AS transfer
          FROM RawData AS rd
         GROUP BY date
         ORDER BY date;
    </select>

</mapper>